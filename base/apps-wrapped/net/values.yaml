fullnameOverride: "apps"

resources:
  - metadata:
      namespace: ""
      labels: { }
      annotations: { }
    resources:
      - apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: net
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: apps-net
          template:
            metadata:
              labels:
                app: apps-net
            spec:
              terminationGracePeriodSeconds: 1
              volumes:
                - name: config
                  configMap:
                    name: apps-net
                - name: pip-cache
                  emptyDir:
                    sizeLimit: 1Gi
              initContainers:
                - name: init
                  image: python:3.11-alpine3.19
                  workingDir: /app
                  resources:
                    requests:
                      cpu: 100m
                      memory: 128Mi
                    limits:
                      cpu: 500m
                      memory: 128Mi
                  volumeMounts:
                    - name: pip-cache
                      mountPath: /app/.venv
                  command:
                    - /bin/sh
                    - -c
                  args:
                    - |
                      python3 -m venv .venv
                      source .venv/bin/activate
                      
                      pip3 install --upgrade pip
                      pip3 install uvicorn fastapi dnspython json
              containers:
                - name: net
                  image: python:3.11-alpine3.19
                  workingDir: /app
                  startupProbe:
                    httpGet:
                      path: /healthz
                      port: 8080
                    initialDelaySeconds: 10
                    periodSeconds: 2
                    successThreshold: 1
                    failureThreshold: 1
                    timeoutSeconds: 1
                  readinessProbe:
                    httpGet:
                      path: /healthz
                      port: 8080
                    initialDelaySeconds: 2
                    periodSeconds: 2
                    successThreshold: 1
                    failureThreshold: 1
                    timeoutSeconds: 1
                  livenessProbe:
                    httpGet:
                      path: /healthz
                      port: 8080
                    initialDelaySeconds: 2
                    periodSeconds: 2
                    successThreshold: 1
                    failureThreshold: 1
                    timeoutSeconds: 1
                  resources:
                    requests:
                      cpu: 100m
                      memory: 64Mi
                    limits:
                      cpu: 300m
                      memory: 64Mi
                  volumeMounts:
                    - name: config
                      subPath: main.py
                      mountPath: /app/main.py
                    - name: pip-cache
                      mountPath: /app/.venv
                  command:
                    - /bin/sh
                    - -c
                  args:
                    - |
                      source .venv/bin/activate
                      
                      uvicorn main:app \
                        --host 0.0.0.0 \
                        --port 8080
      - apiVersion: v1
        kind: ConfigMap
        metadata:
          name: net
        data:
          main.py: |
            from fastapi import FastAPI, Request, Response
            import socket
            from dns import resolver as dns_resolver
            import json
            
            app = FastAPI()
            
            
            @app.get("/")
            def root(request: Request):
                return request.headers
            
            
            @app.get("/tcp/{address_name}/{port}")
            def tcp(address_name, port):
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(2)
            
                if sock.connect_ex((address_name, int(port))) == 0:
                    return Response(json.dumps({"status": "ok"}))
                else:
                    return Response(json.dumps({"status": "fail"}))
            
            
            def flat_resolve(data=None):
                tmp = []
            
                for i in data:
                    tmp.append(str(i))
            
                return tmp
            
            
            @app.get("/dns/{domain}/{server}/{_type}")
            def dns(domain, server, _type):
                resolver = dns_resolver.Resolver()
                resolver.nameservers = [server]
            
                try:
                    result = flat_resolve(resolver.resolve(domain, _type))
            
                    if result:
                        return Response(json.dumps({"status": "success", "data": result}))
                    else:
                        return Response(json.dumps({"status": "fail"}))
            
                except Exception as e:
                    return Response(json.dumps({"status": "fail", "result": str(e)}))
            
            
            @app.get("/healthz")
            def health():
                return Response(json.dumps({"status": "healthy"}))
      - apiVersion: v1
        kind: Service
        metadata:
          name: net
        spec:
          selector:
            app: apps-net
          ports:
            - protocol: TCP
              port: 8080
              targetPort: 8080
      - apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: net-external
          annotations:
            cert-manager.io/cluster-issuer: cert-manager-letsencrypt-prod
            acme.cert-manager.io/http01-edit-in-place: "true"
            nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
            nginx.ingress.kubernetes.io/rewrite-target: /
            nginx.ingress.kubernetes.io/configuration-snippet: |
              proxy_set_header Forwarded $proxy_add_forwarded;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        spec:
          ingressClassName: nginx-external
          tls:
            - hosts:
                - net.sigma.bajojajo.com
              secretName: net-sigma-bajojajo-tls
          rules:
            - host: net.sigma.bajojajo.com
              http:
                paths:
                  - backend:
                      service:
                        name: apps-net
                        port:
                          number: 8080
                    path: /
                    pathType: Prefix
      - apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: net-internal
          annotations:
            nginx.ingress.kubernetes.io/configuration-snippet: |
              proxy_set_header Forwarded $proxy_add_forwarded;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        spec:
          ingressClassName: nginx-internal
          rules:
            - host: net.local.sigma.prod.terenowe.seems.cloud
              http:
                paths:
                  - backend:
                      service:
                        name: apps-net
                        port:
                          number: 8080
                    path: /
                    pathType: Prefix
